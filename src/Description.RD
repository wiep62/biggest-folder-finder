1. для ускорения работы прогшраммы создаем многопоточность,
- MyThread наследуетс от Thread ( реализует многопоточность)
2. FolderSizeCalculator -
в sum += task.join();  .join сработает когда , ответвившийся поток завершит свое выполнение и все потоки тут объеденятся
- потом возвр-ся сумма(полный размер всех файлов)

ПРИМЕР РАБОТЫ МНОГО ПОТОЧНОСТИ:
    //todo ускоряем работу Кода (разветвляем ДЖОЙНИМ):
        MyThread thread = new MyThread(1); //1 potok
        MyThread thread2 = new MyThread(2); // 2 potok

        //zapusk potoka:
        thread.start();
        thread2.start();

        -------------------------------------

        public class MyThread extends Thread{

            private int threadNumber;
            public MyThread(int threadNumber){
         this.threadNumber = threadNumber;
            }
            @Override
            public void run() { //пишем код который будет работать в отдельном потоке (все что хотим пишем):
               // super.run();
                for (;;){
                    System.out.println(threadNumber);
                }
            }
        }
3. Создаем дерево потока NODE , будем сохранять размеры файлов и папок/ Дерево папок/
ЭТО КЛАСС КОТОРЫЙ ПРЕДСТАВЛЯЕТ ИЗ СЕБЯ СТРУКТУРУ , Ы КОТОРУЮ МОЖНО ДОБАВЛЯТЬ ДЕТЕЙ
-  в рутовой ноде есть папка и она проверятся на файл, потом получаем все файлы внутри папки создаем для них ноды, и добавляем в нашу исходную ноду и по каждой отдельной ноде запускам задачу которая делает тодже самое с ними
- у нас будет корневой узел и у каждого узла , будут точно таки же узлы, объекты этого же класса в потомках
- у каждой папки будем сохранять размер

В ФОЛДЕРСАЙЗКАЛЬКУЛЯТОР БУДЕМ ПЕРЕДАВАТЬ НОДУ (КОНКРЕТНЫЙ УЗЕЛ ДЕРЕВА/ конкретная папка в дереве папок)
-  в         return sum; нужно в ноду передать САМ         node.setSize(sum);

-  когда запускаем по файлам папки листФайлс таски , мы должны создать новую ноду ЧАЙЛД

4/ создали SizeCalculator, он содержит статич. методы и переменные
